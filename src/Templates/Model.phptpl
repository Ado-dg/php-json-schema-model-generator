<?php

declare(strict_types = 1);

{{ namespace }}

{{ use }}

/**
 * This is an auto-implemented class implemented by the php-json-schema-model-generator.
 * If you need to implement something in this class use inheritance. Else you will loose your changes if the classes
 * are re-generated.
 *
 * Class {{ class }}
 * @package {{ namespace }}
 */
class {{ class }}
{
    {% foreach properties as property %}
        /** @var {{ property.getTypeHint() }}{% if property.getDescription() %} {{ property.getDescription() }}{% endif %} */
        protected ${{ property.getAttribute() }}{% if not viewHelper.isNull(property.getDefaultValue()) %} = {{ property.getDefaultValue() }}{% endif %};
    {% endforeach %}
    /** @var array */
    protected $rawModelDataInput;

    /**
     * {{ class }} constructor.
     *
     * @param array $modelData
     {% if use %}
        *
        * @throws Exception
     {% endif %}
    */
    public function __construct(array $modelData)
    {
        {% if baseValidators %}
            $value = $modelData;
        {% endif %}

        {% foreach baseValidators as validator %}
             if ({{ validator.getCheck() }}) {
                throw new {{ viewHelper.getSimpleClassName(validator.getExceptionClass()) }}('{{ viewHelper.escapeSingleQuotes(validator.getExceptionMessage()) }}');
            }
        {% endforeach %}

        {% foreach properties as property %}
            $this->process{{ viewHelper.ucfirst(property.getAttribute()) }}($modelData);
        {% endforeach %}

        $this->rawModelDataInput = $modelData;
    }

    /**
     * Get the raw input used to set up the model
     *
     * @return array
     */
    public function getRawModelDataInput(): array
    {
        return $this->rawModelDataInput;
    }

    {% foreach properties as property %}
        /**
         * Get the value of {{ property.getName() }}.
         *
         * {% if property.getDescription() %}{{ property.getDescription() }}{% endif %}
         *
         * @return {{ property.getTypeHint() }}{% if not property.isRequired() %}|null{% endif %}
         */
        public function get{{ viewHelper.ucfirst(property.getAttribute()) }}()
            {% if property.getType() %}: {% if not property.isRequired() %}?{% endif %}{{ property.getType() }}{% endif %}
        {
            return $this->{{ property.getAttribute() }};
        }

        {% if not generatorConfiguration.isImmutable() %}
            /**
             * Set the value of {{ property.getName() }}.
             *
             * {% if property.getDescription() %}{{ property.getDescription() }}{% endif %}
             *
             * @param {{ property.getTypeHint() }} ${{ property.getAttribute() }}
             *
             * @return self
             */
            public function set{{ viewHelper.ucfirst(property.getAttribute()) }}(
                {% if property.getType() %}{% if not property.isRequired() %}?{% endif %}{{ property.getType() }} {% endif %}${{ property.getAttribute() }}
            ): self {
                $this->{{ property.getAttribute() }} = ${{ property.getAttribute() }};
                return $this;
            }
        {% endif %}

        /**
         * Extract the value, perform validations and set the property {{ property.getAttribute() }}
         *
         * @param array $modelData
         *
         * {% if property.getValidators() %}@throws Exception{% endif %}
         */
        protected function process{{ viewHelper.ucfirst(property.getAttribute()) }}(array $modelData): void
        {
            $value = $modelData['{{ property.getName() }}'] ?? $this->{{ property.getAttribute() }};

            {{ viewHelper.resolvePropertyDecorator(property) }}

            {% foreach property.getOrderedValidators() as validator %}
                if ({{ validator.getCheck() }}) {
                    throw new {{ viewHelper.getSimpleClassName(validator.getExceptionClass()) }}('{{ viewHelper.escapeSingleQuotes(validator.getExceptionMessage()) }}');
                }
            {% endforeach %}

            $this->{{ property.getAttribute() }} = $value;
        }
    {% endforeach %}
}
