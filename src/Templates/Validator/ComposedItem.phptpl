{%if onlyForDefinedValues %}
    $value !== null &&
{% endif %}
(function (&$value) use (&$modelData, &$compositionErrorCollection, &$succeededCompositionElements, &$validatorIndex) {
    $succeededCompositionElements = {{ availableAmount }};
    $validatorComponentIndex = 0;
    $originalModelData = $value;
    $proposedValue = null;

    {% if generatorConfiguration.collectErrors() %}
        $originalErrorRegistry = $this->_errorRegistry;
    {% endif %}

    {% foreach properties as property %}
        try {
            // check if the state of the validator is already known. If the property is not changed the validator must not
            // be re-evaluated
            if ($validatorIndex !== null &&
                !isset($modelData['{{ property.getName() }}'])
                && isset($this->_propertyValidationState[$validatorIndex][$validatorComponentIndex])
            ) {
                if (!$this->_propertyValidationState[$validatorIndex][$validatorComponentIndex]) {
                    throw new \Exception();
                }
            } else {
                {% if generatorConfiguration.collectErrors() %}
                    // collect errors for each composition element
                    $this->_errorRegistry = new {{ viewHelper.getSimpleClassName(generatorConfiguration.getErrorRegistryClass()) }}();
                {% endif %}

                {% if not postPropose %}
                    $proposedValue = $proposedValue ?? $value;
                {% endif %}

                {{ viewHelper.resolvePropertyDecorator(property) }}

                {% foreach property.getOrderedValidators() as validator %}
                    {{ validator.getValidatorSetUp() }}
                    if ({{ validator.getCheck() }}) {
                        {{ viewHelper.validationError(validator) }}
                    }
                {% endforeach %}

                {% if generatorConfiguration.collectErrors() %}
                    $compositionErrorCollection[] = $this->_errorRegistry;

                    // an error inside the composed validation occurred. Throw an exception to count the validity of the
                    // composition item
                    if ($this->_errorRegistry->getErrors()) {
                        throw new \Exception();
                    }
                {% endif %}

                {% if postPropose %}
                    $proposedValue = $proposedValue ?? $value;
                {% endif %}

                $this->_propertyValidationState[$validatorIndex][$validatorComponentIndex++] = true;
            }
        } catch (\Exception $e) {
            $this->_propertyValidationState[$validatorIndex][$validatorComponentIndex++] = false;

            {% foreach property.getAffectedObjectProperties() as affectedObjectProperty %}
                unset($modelData['{{ affectedObjectProperty.getName() }}']);
            {% endforeach %}

            $succeededCompositionElements--;
        }
        $value = $originalModelData;
    {% endforeach %}

    {% if mergedProperty %}
        if (is_object($proposedValue)) {
            {{ viewHelper.resolvePropertyDecorator(mergedProperty) }}
        } else {
            $value = $proposedValue;
        }
    {% else %}
        $value = $proposedValue;
    {% endif %}

    {% if generatorConfiguration.collectErrors() %}
        $this->_errorRegistry = $originalErrorRegistry;
    {% endif %}

    return !({{ composedValueValidation }});
})($value)
