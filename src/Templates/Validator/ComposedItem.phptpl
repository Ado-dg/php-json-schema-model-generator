{%if onlyForDefinedValues %}
    $value !== null &&
{% endif %}
(function (&$value) use (&$modelData, &$compositionErrorCollection, &$succeededCompositionElements) {
    $succeededCompositionElements = {{ availableAmount }};
    $originalModelData = $value;
    $proposedValue = null;
    {% if generatorConfiguration.collectErrors() %}
        $originalErrorRegistry = $this->errorRegistry;
    {% endif %}

    {% foreach properties as property %}
        try {
            {% if generatorConfiguration.collectErrors() %}
                // collect errors for each composition element
                $this->errorRegistry = new {{ viewHelper.getSimpleClassName(generatorConfiguration.getErrorRegistryClass()) }}();
            {% endif %}

            {% if not postPropose %}
                $proposedValue = $proposedValue ?? $value;
            {% endif %}

            {{ viewHelper.resolvePropertyDecorator(property) }}

            {% foreach property.getOrderedValidators() as validator %}
                {{ validator.getValidatorSetUp() }}
                if ({{ validator.getCheck() }}) {
                    {{ viewHelper.validationError(validator) }}
                }
            {% endforeach %}

            {% if generatorConfiguration.collectErrors() %}
                $compositionErrorCollection[] = $this->errorRegistry;

                // an error inside the composed validation occurred. Throw an exception to count the validity of the
                // composition item
                if ($this->errorRegistry->getErrors()) {
                    throw new \Exception();
                }
            {% endif %}

            {% if postPropose %}
                $proposedValue = $proposedValue ?? $value;
            {% endif %}
        } catch (\Exception $e) {
            {% foreach property.getAffectedObjectProperties() as affectedObjectProperty %}
                unset($modelData['{{ affectedObjectProperty.getName() }}']);
            {% endforeach %}

            $succeededCompositionElements--;
        }
        $value = $originalModelData;
    {% endforeach %}

    {% if mergedProperty %}
        if (is_object($proposedValue)) {
            {{ viewHelper.resolvePropertyDecorator(mergedProperty) }}
        } else {
            $value = $proposedValue;
        }
    {% else %}
        $value = $proposedValue;
    {% endif %}

    {% if generatorConfiguration.collectErrors() %}
        $this->errorRegistry = $originalErrorRegistry;
    {% endif %}

    return !({{ composedValueValidation }});
})($value)
